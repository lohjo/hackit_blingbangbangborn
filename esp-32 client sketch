#include <Wire.h>
#include <U8g2lib.h>

// Define your OLED display connections.
// These are common for Heltec WiFi Kit 32, but you may need to change them.
#define OLED_SDA 4
#define OLED_SCL 15
#define OLED_RST 16

// U8g2 constructor for a 128x64 SH1106 display.
// If you have a different display (like SSD1306), you can change this line.
// Example for SSD1306: U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ OLED_RST, /* clock=*/ OLED_SCL, /* data=*/ OLED_SDA);
U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ OLED_RST, /* clock=*/ OLED_SCL, /* data=*/ OLED_SDA);

// Buffer to hold the incoming bitmap data (128 pixels * 64 pixels / 8 bits per byte = 1024 bytes)
unsigned char xbm_bitmap[1024];

void setup() {
  // Start serial communication. The baud rate must match the sender.
  Serial.begin(115200);

  // Initialize the OLED display
  u8g2.begin();
  
  // Display a startup message
  showStartupScreen();
}

void loop() {
  // Check if there is enough data available to fill the entire screen buffer
  if (Serial.available() >= 1024) {
    // Read the 1024 bytes of XBM data from the serial port into our buffer
    Serial.readBytes(xbm_bitmap, 1024);

    // Clear the display's internal buffer
    u8g2.clearBuffer();
    
    // Draw the XBM data to the buffer.
    // The drawXBM function takes the top-left corner (x, y), width, height, and the bitmap data.
    u8g2.drawXBM(0, 0, 128, 64, xbm_bitmap);
    
    // Send the buffer content to the physical display
    u8g2.sendBuffer();
  }
}

void showStartupScreen() {
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_ncenB08_tr); // A simple, clear font
  u8g2.drawStr(0, 15, "XBM Display Ready");
  u8g2.drawStr(0, 35, "Waiting for serial...");
  u8g2.drawStr(0, 55, "Baud: 115200");
  u8g2.sendBuffer();
}